"""
TESTE LOCAL DA MIGRA√á√ÉO - Sistema UP380

Este script testa a migra√ß√£o em uma C√ìPIA do banco de produ√ß√£o
para garantir que tudo funcionar√° antes de aplicar em produ√ß√£o.

USO:
1. Copie seu banco de produ√ß√£o para: instance/pendencias_teste.db
2. Execute: python testar_migracao_local.py
3. Verifique se n√£o h√° erros
4. Se tudo OK, pode aplicar em produ√ß√£o!
"""

import sqlite3
import os
import sys
from datetime import datetime

# ============================================================================
# CONFIGURA√á√ÉO
# ============================================================================

# Usar banco de teste
DB_PATH = 'instance/pendencias_teste.db'

print("=" * 80)
print("TESTE LOCAL DE MIGRA√á√ÉO - Sistema UP380")
print("=" * 80)
print()

# Verificar se existe banco de teste
if not os.path.exists(DB_PATH):
    print("‚ùå Banco de teste n√£o encontrado!")
    print()
    print("PARA CRIAR O BANCO DE TESTE:")
    print()
    print("1. Se tiver acesso ao banco de produ√ß√£o:")
    print("   - Copie: instance/pendencias.db")
    print("   - Para: instance/pendencias_teste.db")
    print()
    print("2. Ou baixe da VPS:")
    print("   scp usuario@VPS:~/sistema_pendencia/instance/pendencias.db instance/pendencias_teste.db")
    print()
    print("3. Depois execute novamente:")
    print("   python testar_migracao_local.py")
    print()
    sys.exit(1)

print(f"‚úÖ Banco de teste encontrado: {DB_PATH}")
print()

# Importar o script de migra√ß√£o
import importlib.util
spec = importlib.util.spec_from_file_location("migracao", "migracao_producao_completa.py")
migracao = importlib.util.module_from_spec(spec)
sys.modules["migracao"] = migracao
spec.loader.exec_module(migracao)

# Alterar o caminho do banco no m√≥dulo de migra√ß√£o
migracao.DB_PATH = DB_PATH

# Executar teste
print("üß™ Iniciando teste de migra√ß√£o...")
print()

sucesso = migracao.main()

if sucesso:
    print()
    print("=" * 80)
    print("‚úÖ TESTE DE MIGRA√á√ÉO CONCLU√çDO COM SUCESSO!")
    print("=" * 80)
    print()
    print("üìä Estat√≠sticas do banco de teste:")
    
    conn = sqlite3.connect(DB_PATH)
    
    # Estat√≠sticas
    cursor = conn.execute("SELECT COUNT(*) FROM segmento")
    print(f"   Segmentos: {cursor.fetchone()[0]}")
    
    cursor = conn.execute("SELECT COUNT(*) FROM empresa")
    print(f"   Empresas: {cursor.fetchone()[0]}")
    
    cursor = conn.execute("SELECT COUNT(*) FROM empresa WHERE segmento_id IS NOT NULL")
    print(f"   Empresas vinculadas: {cursor.fetchone()[0]}")
    
    cursor = conn.execute("SELECT COUNT(*) FROM pendencia")
    print(f"   Pend√™ncias: {cursor.fetchone()[0]}")
    
    conn.close()
    
    print()
    print("‚úÖ A migra√ß√£o est√° PRONTA para ser aplicada em produ√ß√£o!")
    print()
    print("PR√ìXIMOS PASSOS:")
    print("1. Fa√ßa commit e push para GitHub")
    print("2. Na VPS, execute: python3 migracao_producao_completa.py")
    print()
else:
    print()
    print("=" * 80)
    print("‚ùå TESTE DE MIGRA√á√ÉO FALHOU!")
    print("=" * 80)
    print()
    print("‚ö†Ô∏è  N√ÉO aplique em produ√ß√£o at√© corrigir os erros!")
    print()
    print("Verifique:")
    print("1. Mensagens de erro acima")
    print("2. Estrutura do banco")
    print("3. Compatibilidade dos scripts")
    print()


