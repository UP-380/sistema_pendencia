image.png"""
MIGRA√á√ÉO: CONSOLIDAR TIPOS DE DOCUMENTOS - Sistema UP380
Data: 28/10/2025

Este script consolida os tipos antigos de pend√™ncias de documentos:
- "NOTA FISCAL N√ÉO ANEXADA" ‚Üí "DOCUMENTO N√ÉO ANEXADO"
- "NOTA FISCAL N√ÉO IDENTIFICADA" ‚Üí "DOCUMENTO N√ÉO ANEXADO"

IMPORTANTE: 
- Fa√ßa backup antes de executar!
- Pode ser executado m√∫ltiplas vezes (√© idempotente)
- Preserva todos os outros dados das pend√™ncias

USO:
    python migracao_consolidar_documentos.py
"""

import sqlite3
from datetime import datetime
import os
import sys

# ============================================================================
# CONFIGURA√á√ÉO
# ============================================================================

# Caminho do banco (ajuste se necess√°rio)
DB_PATH = 'instance/pendencias.db'

# Mapeamento de tipos antigos para novo
TIPOS_PARA_MIGRAR = {
    "NOTA FISCAL N√ÉO ANEXADA": "DOCUMENTO N√ÉO ANEXADO",
    "NOTA FISCAL N√ÉO IDENTIFICADA": "DOCUMENTO N√ÉO ANEXADO",
    # Varia√ß√µes poss√≠veis (case sensitive)
    "Nota Fiscal N√£o Anexada": "DOCUMENTO N√ÉO ANEXADO",
    "Nota Fiscal N√£o Identificada": "DOCUMENTO N√ÉO ANEXADO",
}

# ============================================================================
# FUN√á√ïES AUXILIARES
# ============================================================================

def fazer_backup(db_path):
    """Cria backup do banco antes da migra√ß√£o"""
    if not os.path.exists(db_path):
        print(f"‚ùå Banco n√£o encontrado: {db_path}")
        return None
    
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_dir = 'backups'
    
    if not os.path.exists(backup_dir):
        os.makedirs(backup_dir)
    
    backup_path = f"{backup_dir}/pendencias_backup_docs_{timestamp}.db"
    
    try:
        import shutil
        shutil.copy2(db_path, backup_path)
        size_mb = os.path.getsize(backup_path) / (1024 * 1024)
        print(f"‚úÖ Backup criado: {backup_path} ({size_mb:.2f} MB)")
        return backup_path
    except Exception as e:
        print(f"‚ùå Erro ao criar backup: {e}")
        return None

def conectar_banco(db_path):
    """Conecta ao banco de dados"""
    try:
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        print(f"‚úÖ Conectado ao banco: {db_path}")
        return conn
    except Exception as e:
        print(f"‚ùå Erro ao conectar: {e}")
        return None

# ============================================================================
# AN√ÅLISE PR√â-MIGRA√á√ÉO
# ============================================================================

def analisar_tipos_pendencias(conn):
    """Analisa tipos de pend√™ncias existentes"""
    print("\nüìä Analisando tipos de pend√™ncias no banco...\n")
    
    try:
        # Buscar todos os tipos √∫nicos
        cursor = conn.execute("""
            SELECT tipo_pendencia, COUNT(*) as quantidade
            FROM pendencia
            GROUP BY tipo_pendencia
            ORDER BY quantidade DESC
        """)
        
        tipos_encontrados = cursor.fetchall()
        
        print("Tipos existentes no banco:")
        print("-" * 60)
        
        total_para_migrar = 0
        tipos_a_migrar = []
        
        for row in tipos_encontrados:
            tipo = row['tipo_pendencia']
            qtd = row['quantidade']
            
            # Verificar se √© tipo a migrar
            if tipo in TIPOS_PARA_MIGRAR:
                marcador = "‚Üí SER√Å MIGRADO"
                total_para_migrar += qtd
                tipos_a_migrar.append((tipo, qtd))
            else:
                marcador = ""
            
            print(f"  {tipo:<40} | {qtd:>5} registros {marcador}")
        
        print("-" * 60)
        print(f"TOTAL: {len(tipos_encontrados)} tipos diferentes")
        print()
        
        return total_para_migrar, tipos_a_migrar
        
    except Exception as e:
        print(f"‚ùå Erro ao analisar: {e}")
        return 0, []

# ============================================================================
# MIGRA√á√ÉO
# ============================================================================

def migrar_tipos_documentos(conn):
    """Migra os tipos de documentos antigos para o novo"""
    print("\nüîÑ Iniciando migra√ß√£o de tipos de documentos...\n")
    
    try:
        total_migrado = 0
        detalhes_migracao = []
        
        for tipo_antigo, tipo_novo in TIPOS_PARA_MIGRAR.items():
            # Contar quantos registros t√™m esse tipo
            cursor = conn.execute(
                "SELECT COUNT(*) as qtd FROM pendencia WHERE tipo_pendencia = ?",
                (tipo_antigo,)
            )
            qtd = cursor.fetchone()['qtd']
            
            if qtd > 0:
                # Atualizar para o novo tipo
                cursor = conn.execute("""
                    UPDATE pendencia 
                    SET tipo_pendencia = ?
                    WHERE tipo_pendencia = ?
                """, (tipo_novo, tipo_antigo))
                
                registros_atualizados = cursor.rowcount
                total_migrado += registros_atualizados
                
                print(f"  ‚úì {tipo_antigo}")
                print(f"    ‚Üí {tipo_novo}")
                print(f"    Migrados: {registros_atualizados} registros")
                print()
                
                detalhes_migracao.append({
                    'tipo_antigo': tipo_antigo,
                    'tipo_novo': tipo_novo,
                    'quantidade': registros_atualizados
                })
        
        # Commit das mudan√ßas
        conn.commit()
        
        return total_migrado, detalhes_migracao
        
    except Exception as e:
        print(f"‚ùå Erro durante migra√ß√£o: {e}")
        conn.rollback()
        return 0, []

# ============================================================================
# VALIDA√á√ÉO P√ìS-MIGRA√á√ÉO
# ============================================================================

def validar_migracao(conn, detalhes_migracao):
    """Valida se a migra√ß√£o foi bem-sucedida"""
    print("\nüîç Validando migra√ß√£o...\n")
    
    try:
        # Verificar se ainda existem tipos antigos
        tipos_antigos_restantes = []
        
        for tipo_antigo in TIPOS_PARA_MIGRAR.keys():
            cursor = conn.execute(
                "SELECT COUNT(*) as qtd FROM pendencia WHERE tipo_pendencia = ?",
                (tipo_antigo,)
            )
            qtd = cursor.fetchone()['qtd']
            
            if qtd > 0:
                tipos_antigos_restantes.append((tipo_antigo, qtd))
        
        if tipos_antigos_restantes:
            print("‚ö†Ô∏è  ATEN√á√ÉO: Ainda existem tipos antigos no banco:")
            for tipo, qtd in tipos_antigos_restantes:
                print(f"   - {tipo}: {qtd} registros")
            return False
        
        # Verificar quantidade do novo tipo
        cursor = conn.execute(
            "SELECT COUNT(*) as qtd FROM pendencia WHERE tipo_pendencia = ?",
            ("DOCUMENTO N√ÉO ANEXADO",)
        )
        qtd_novo_tipo = cursor.fetchone()['qtd']
        
        print(f"‚úÖ Tipo consolidado: DOCUMENTO N√ÉO ANEXADO")
        print(f"   Total de registros: {qtd_novo_tipo}")
        print()
        
        # Verificar integridade dos dados migrados
        print("Verificando integridade dos dados migrados:")
        
        # Contar registros com campos importantes n√£o-nulos
        cursor = conn.execute("""
            SELECT COUNT(*) as total
            FROM pendencia
            WHERE tipo_pendencia = 'DOCUMENTO N√ÉO ANEXADO'
        """)
        total = cursor.fetchone()['total']
        
        cursor = conn.execute("""
            SELECT COUNT(*) as com_empresa
            FROM pendencia
            WHERE tipo_pendencia = 'DOCUMENTO N√ÉO ANEXADO'
            AND empresa IS NOT NULL AND empresa != ''
        """)
        com_empresa = cursor.fetchone()['com_empresa']
        
        cursor = conn.execute("""
            SELECT COUNT(*) as com_valor
            FROM pendencia
            WHERE tipo_pendencia = 'DOCUMENTO N√ÉO ANEXADO'
            AND valor IS NOT NULL AND valor > 0
        """)
        com_valor = cursor.fetchone()['com_valor']
        
        print(f"  ‚úì Total de registros: {total}")
        print(f"  ‚úì Com empresa: {com_empresa}/{total}")
        print(f"  ‚úì Com valor: {com_valor}/{total}")
        print()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na valida√ß√£o: {e}")
        return False

# ============================================================================
# RELAT√ìRIO FINAL
# ============================================================================

def gerar_relatorio(total_migrado, detalhes_migracao, tempo_execucao):
    """Gera relat√≥rio final da migra√ß√£o"""
    print("\n" + "=" * 80)
    print("RELAT√ìRIO DE MIGRA√á√ÉO - CONSOLIDA√á√ÉO DE TIPOS DE DOCUMENTOS")
    print("=" * 80)
    print()
    
    if total_migrado == 0:
        print("‚ÑπÔ∏è  Nenhum registro precisou ser migrado.")
        print("   Poss√≠veis raz√µes:")
        print("   - Migra√ß√£o j√° foi executada anteriormente")
        print("   - N√£o existem registros com os tipos antigos")
        print()
        return
    
    print(f"‚úÖ Migra√ß√£o conclu√≠da com sucesso!")
    print()
    print(f"üìä Estat√≠sticas:")
    print(f"   Total de registros migrados: {total_migrado}")
    print(f"   Tempo de execu√ß√£o: {tempo_execucao:.2f} segundos")
    print()
    
    print("üìã Detalhes da migra√ß√£o:")
    for detalhe in detalhes_migracao:
        print(f"   ‚Ä¢ {detalhe['tipo_antigo']}")
        print(f"     ‚Üí {detalhe['tipo_novo']}")
        print(f"     {detalhe['quantidade']} registros")
        print()
    
    print("üéØ Tipo consolidado:")
    print("   DOCUMENTO N√ÉO ANEXADO")
    print()
    
    print("=" * 80)

# ============================================================================
# MAIN
# ============================================================================

def main():
    import time
    
    print("=" * 80)
    print("MIGRA√á√ÉO: CONSOLIDA√á√ÉO DE TIPOS DE DOCUMENTOS")
    print("Sistema UP380")
    print("=" * 80)
    print()
    
    # Verificar se banco existe
    if not os.path.exists(DB_PATH):
        print(f"‚ùå Banco n√£o encontrado: {DB_PATH}")
        print(f"   Certifique-se de estar na pasta correta!")
        return False
    
    # Fazer backup
    print("üîí Criando backup de seguran√ßa...")
    backup_path = fazer_backup(DB_PATH)
    if not backup_path:
        print("‚ùå Falha ao criar backup. Abortando migra√ß√£o.")
        return False
    
    print()
    
    # Conectar ao banco
    conn = conectar_banco(DB_PATH)
    if not conn:
        return False
    
    try:
        inicio = time.time()
        
        # An√°lise pr√©-migra√ß√£o
        total_para_migrar, tipos_a_migrar = analisar_tipos_pendencias(conn)
        
        if total_para_migrar == 0:
            print("\n‚ÑπÔ∏è  Nenhum registro para migrar.")
            print("   Os tipos antigos n√£o foram encontrados no banco.")
            print("   Poss√≠vel que a migra√ß√£o j√° tenha sido executada.")
            conn.close()
            return True
        
        print(f"\n‚ö†Ô∏è  Ser√£o migrados {total_para_migrar} registros")
        print(f"   De {len(tipos_a_migrar)} tipo(s) diferente(s)")
        print()
        
        # Confirmar migra√ß√£o (em produ√ß√£o, voc√™ pode querer adicionar input do usu√°rio)
        print("üöÄ Iniciando migra√ß√£o...")
        
        # Executar migra√ß√£o
        total_migrado, detalhes_migracao = migrar_tipos_documentos(conn)
        
        if total_migrado == 0:
            print("‚ùå Nenhum registro foi migrado.")
            conn.close()
            return False
        
        # Validar
        validacao_ok = validar_migracao(conn, detalhes_migracao)
        
        if not validacao_ok:
            print("‚ö†Ô∏è  Valida√ß√£o identificou problemas. Verifique acima.")
        
        fim = time.time()
        tempo_execucao = fim - inicio
        
        # Relat√≥rio
        gerar_relatorio(total_migrado, detalhes_migracao, tempo_execucao)
        
        print(f"üíæ Backup salvo em: {backup_path}")
        print("‚úÖ Migra√ß√£o conclu√≠da!")
        print()
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erro durante migra√ß√£o: {e}")
        print(f"üíæ Backup dispon√≠vel em: {backup_path}")
        if conn:
            conn.rollback()
            conn.close()
        return False

if __name__ == "__main__":
    sucesso = main()
    sys.exit(0 if sucesso else 1)


