#!/usr/bin/env python3
"""
Script de migra√ß√£o para adicionar as colunas natureza_operacao e motivo_recusa
√† tabela pendencia no banco de dados SQLite.
"""

import sqlite3
import os

def migrate_database():
    """Adiciona as colunas natureza_operacao e motivo_recusa √† tabela pendencia"""
    
    # Caminho do banco de dados
    db_path = 'instance/pendencias.db'
    
    # Verifica se o banco existe
    if not os.path.exists(db_path):
        print(f"Banco de dados n√£o encontrado em: {db_path}")
        return False
    
    try:
        # Conecta ao banco
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Verifica se as colunas j√° existem
        cursor.execute("PRAGMA table_info(pendencia)")
        columns = [column[1] for column in cursor.fetchall()]
        
        print("Colunas existentes na tabela pendencia:")
        for col in columns:
            print(f"  - {col}")
        
        # Adiciona a coluna natureza_operacao se n√£o existir
        if 'natureza_operacao' not in columns:
            print("Adicionando coluna 'natureza_operacao'...")
            cursor.execute("ALTER TABLE pendencia ADD COLUMN natureza_operacao TEXT")
            print("‚úì Coluna 'natureza_operacao' adicionada com sucesso!")
        else:
            print("‚úì Coluna 'natureza_operacao' j√° existe")
        
        # Adiciona a coluna motivo_recusa se n√£o existir
        if 'motivo_recusa' not in columns:
            print("Adicionando coluna 'motivo_recusa'...")
            cursor.execute("ALTER TABLE pendencia ADD COLUMN motivo_recusa TEXT")
            print("‚úì Coluna 'motivo_recusa' adicionada com sucesso!")
        else:
            print("‚úì Coluna 'motivo_recusa' j√° existe")
        
        # Confirma as altera√ß√µes
        conn.commit()
        
        # Verifica novamente as colunas
        cursor.execute("PRAGMA table_info(pendencia)")
        columns_after = [column[1] for column in cursor.fetchall()]
        
        print("\nColunas ap√≥s a migra√ß√£o:")
        for col in columns_after:
            print(f"  - {col}")
        
        conn.close()
        print("\n‚úÖ Migra√ß√£o conclu√≠da com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante a migra√ß√£o: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Iniciando migra√ß√£o do banco de dados...")
    success = migrate_database()
    
    if success:
        print("\nüéâ Migra√ß√£o realizada com sucesso!")
        print("Agora voc√™ pode reiniciar o sistema.")
    else:
        print("\nüí• Falha na migra√ß√£o. Verifique os erros acima.") 