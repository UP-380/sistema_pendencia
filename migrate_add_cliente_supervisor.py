"""
Script de migra√ß√£o para adicionar o tipo de usu√°rio 'cliente_supervisor'
e configurar suas permiss√µes padr√£o no sistema.

Execu√ß√£o: python migrate_add_cliente_supervisor.py
"""

import sqlite3
from datetime import datetime

def migrate():
    """Adiciona permiss√µes para o tipo de usu√°rio cliente_supervisor"""
    
    print("=" * 60)
    print("MIGRA√á√ÉO: Adicionar Cliente Supervisor")
    print("=" * 60)
    
    conn = sqlite3.connect('instance/pendencias.db')
    cursor = conn.cursor()
    
    try:
        # Verificar se a tabela existe
        cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='permissao_usuario_tipo'
        """)
        
        if not cursor.fetchone():
            print("‚ùå Tabela permissao_usuario_tipo n√£o encontrada!")
            print("   Execute primeiro a cria√ß√£o das tabelas do sistema.")
            return
        
        # Lista de permiss√µes para cliente_supervisor
        permissoes_cliente_supervisor = [
            ('cliente_supervisor', 'cadastrar_pendencia', False),
            ('cliente_supervisor', 'editar_pendencia', False),
            ('cliente_supervisor', 'importar_planilha', False),
            ('cliente_supervisor', 'baixar_anexo', True),
            ('cliente_supervisor', 'aprovar_pendencia', False),
            ('cliente_supervisor', 'recusar_pendencia', False),
            ('cliente_supervisor', 'exportar_logs', True),
            ('cliente_supervisor', 'gerenciar_usuarios', False),
            ('cliente_supervisor', 'gerenciar_empresas', False),
            ('cliente_supervisor', 'visualizar_relatorios', True),
        ]
        
        print("\nüìã Configurando permiss√µes para cliente_supervisor...")
        
        for tipo_usuario, funcionalidade, permitido in permissoes_cliente_supervisor:
            # Verificar se j√° existe
            cursor.execute("""
                SELECT id FROM permissao_usuario_tipo 
                WHERE tipo_usuario = ? AND funcionalidade = ?
            """, (tipo_usuario, funcionalidade))
            
            existing = cursor.fetchone()
            
            if existing:
                # Atualizar
                cursor.execute("""
                    UPDATE permissao_usuario_tipo 
                    SET permitido = ? 
                    WHERE tipo_usuario = ? AND funcionalidade = ?
                """, (permitido, tipo_usuario, funcionalidade))
                print(f"   ‚úÖ Atualizado: {funcionalidade} = {permitido}")
            else:
                # Inserir
                cursor.execute("""
                    INSERT INTO permissao_usuario_tipo (tipo_usuario, funcionalidade, permitido)
                    VALUES (?, ?, ?)
                """, (tipo_usuario, funcionalidade, permitido))
                print(f"   ‚ûï Criado: {funcionalidade} = {permitido}")
        
        # Commit das altera√ß√µes
        conn.commit()
        
        # Verificar resultado
        cursor.execute("""
            SELECT funcionalidade, permitido 
            FROM permissao_usuario_tipo 
            WHERE tipo_usuario = 'cliente_supervisor'
            ORDER BY funcionalidade
        """)
        
        permissoes = cursor.fetchall()
        
        print("\n" + "=" * 60)
        print("‚úÖ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!")
        print("=" * 60)
        print(f"\nüìä Total de permiss√µes configuradas: {len(permissoes)}")
        print("\nüîê Permiss√µes do Cliente Supervisor:")
        print("-" * 60)
        
        for funcionalidade, permitido in permissoes:
            status = "‚úÖ Permitido" if permitido else "‚ùå Negado"
            print(f"   {funcionalidade:30} ‚Üí {status}")
        
        print("\n" + "=" * 60)
        print("üìù RESUMO DAS FUNCIONALIDADES DO CLIENTE SUPERVISOR:")
        print("=" * 60)
        print("""
‚úÖ Pode:
   ‚Ä¢ Responder pend√™ncias normalmente
   ‚Ä¢ Visualizar pend√™ncias resolvidas
   ‚Ä¢ Acessar dashboards e relat√≥rios
   ‚Ä¢ Exportar logs e relat√≥rios
   ‚Ä¢ Baixar anexos
   ‚Ä¢ Ver relat√≥rio mensal
   ‚Ä¢ Ver relat√≥rio de operadores

‚ùå N√£o pode:
   ‚Ä¢ Criar ou editar pend√™ncias manualmente
   ‚Ä¢ Importar planilhas
   ‚Ä¢ Aprovar ou recusar pend√™ncias como operador/supervisor
   ‚Ä¢ Gerenciar usu√°rios
   ‚Ä¢ Gerenciar empresas
        """)
        
        print("\n" + "=" * 60)
        print("üéØ PR√ìXIMOS PASSOS:")
        print("=" * 60)
        print("""
1. Reinicie a aplica√ß√£o para carregar as novas permiss√µes
2. Crie usu√°rios do tipo 'cliente_supervisor' no painel admin
3. Associe empresas aos clientes supervisores
4. Teste o acesso com um usu√°rio cliente_supervisor
        """)
        
    except Exception as e:
        conn.rollback()
        print(f"\n‚ùå ERRO durante a migra√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    finally:
        conn.close()
    
    return True

if __name__ == '__main__':
    print("\nüöÄ Iniciando migra√ß√£o para Cliente Supervisor...")
    print(f"üìÖ Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print()
    
    sucesso = migrate()
    
    if sucesso:
        print("\n‚úÖ Migra√ß√£o executada com sucesso!")
        print("   O tipo 'cliente_supervisor' est√° pronto para uso.")
    else:
        print("\n‚ùå Migra√ß√£o falhou!")
        print("   Verifique os erros acima e tente novamente.")
    
    print("\n" + "=" * 60)

