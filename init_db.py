#!/usr/bin/env python3
"""
Script de inicializa√ß√£o do banco de dados.

Este script:
1. Cria todas as tabelas necess√°rias
2. Cria usu√°rios iniciais (admin e cliente padr√£o)
3. Migra empresas da lista EMPRESAS para o modelo Empresa
4. Configura permiss√µes padr√£o para todos os tipos de usu√°rio
5. Cria estrutura de segmentos (opcional)

Execute este script ap√≥s clonar o reposit√≥rio ou ap√≥s atualiza√ß√µes que modifiquem o schema.
"""

from app import app, db, criar_usuarios_iniciais, migrar_empresas_existentes, configurar_permissoes_padrao
from app import Segmento, Empresa, Usuario, PermissaoUsuarioTipo
import sys

def verificar_banco():
    """Verifica o estado atual do banco de dados"""
    with app.app_context():
        try:
            # Tentar contar registros das principais tabelas
            total_empresas = Empresa.query.count()
            total_usuarios = Usuario.query.count()
            total_segmentos = Segmento.query.count()
            total_permissoes = PermissaoUsuarioTipo.query.count()
            
            print("\nüìä Estado atual do banco de dados:")
            print(f"  ‚Ä¢ Empresas: {total_empresas}")
            print(f"  ‚Ä¢ Usu√°rios: {total_usuarios}")
            print(f"  ‚Ä¢ Segmentos: {total_segmentos}")
            print(f"  ‚Ä¢ Permiss√µes: {total_permissoes}")
            
            return True
        except Exception as e:
            print(f"\n‚ö†Ô∏è  Banco de dados n√£o inicializado ou com problemas: {e}")
            return False

def inicializar_banco():
    """Inicializa o banco de dados com todas as estruturas"""
    with app.app_context():
        print("\nüîÑ Criando estruturas do banco de dados...")
        
        try:
            # Criar todas as tabelas
            db.create_all()
            print("‚úÖ Tabelas criadas com sucesso!")
            
            # Criar usu√°rios iniciais
            print("\nüîÑ Criando usu√°rios iniciais...")
            criar_usuarios_iniciais()
            print("‚úÖ Usu√°rios iniciais criados/verificados!")
            
            # Migrar empresas
            print("\nüîÑ Migrando empresas...")
            migrar_empresas_existentes()
            print("‚úÖ Empresas migradas com sucesso!")
            
            # Configurar permiss√µes
            print("\nüîÑ Configurando permiss√µes padr√£o...")
            configurar_permissoes_padrao()
            db.session.commit()
            print("‚úÖ Permiss√µes configuradas com sucesso!")
            
            return True
            
        except Exception as e:
            db.session.rollback()
            print(f"\n‚ùå Erro durante inicializa√ß√£o: {e}")
            return False

def criar_segmentos_basicos():
    """Cria segmentos b√°sicos se n√£o existirem"""
    with app.app_context():
        if Segmento.query.count() > 0:
            print("\n‚è≠Ô∏è  Segmentos j√° existem. Pulando cria√ß√£o.")
            return
        
        print("\nüîÑ Criando segmentos b√°sicos...")
        segmentos = ['Financeiro', 'Operacional', 'Comercial', 'Administrativo']
        
        for nome in segmentos:
            seg = Segmento(nome=nome)
            db.session.add(seg)
            print(f"  ‚úÖ Criado: {nome}")
        
        try:
            db.session.commit()
            print("‚úÖ Segmentos criados com sucesso!")
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå Erro ao criar segmentos: {e}")

def main():
    """Fun√ß√£o principal"""
    print("=" * 80)
    print("SCRIPT DE INICIALIZA√á√ÉO DO BANCO DE DADOS")
    print("Sistema de Pend√™ncias UP380")
    print("=" * 80)
    
    # Verificar estado atual
    banco_ok = verificar_banco()
    
    if banco_ok:
        print("\n‚úÖ Banco de dados j√° est√° inicializado!")
        resposta = input("\nDeseja reconfigurar as estruturas? (sim/n√£o): ").strip().lower()
        
        if resposta not in ['sim', 's', 'yes', 'y']:
            print("\nüí° Nenhuma altera√ß√£o realizada.")
            print("   Para criar segmentos, execute: python migrate_adicionar_segmentos.py")
            print("   Para migrar tipos de pend√™ncia, execute: python migrate_nota_fiscal_para_documento.py")
            return
    
    # Inicializar/reconfigurar
    print("\n‚ö†Ô∏è  Iniciando processo de inicializa√ß√£o/reconfigura√ß√£o...")
    print("    Isso criar√° todas as tabelas e configura√ß√µes necess√°rias.")
    
    if banco_ok:
        resposta = input("\nTem certeza? (sim/n√£o): ").strip().lower()
        if resposta not in ['sim', 's', 'yes', 'y']:
            print("‚ùå Opera√ß√£o cancelada.")
            return
    
    # Executar inicializa√ß√£o
    if not inicializar_banco():
        print("\n‚ùå Falha na inicializa√ß√£o do banco de dados!")
        sys.exit(1)
    
    # Perguntar sobre segmentos
    resposta = input("\nDeseja criar segmentos b√°sicos? (sim/n√£o): ").strip().lower()
    if resposta in ['sim', 's', 'yes', 'y']:
        criar_segmentos_basicos()
    
    # Verificar resultado final
    verificar_banco()
    
    print("\n" + "=" * 80)
    print("‚úÖ INICIALIZA√á√ÉO CONCLU√çDA COM SUCESSO!")
    print("=" * 80)
    print("\nüìã Pr√≥ximos passos:")
    print("  1. Acesse o sistema com o usu√°rio admin:")
    print("     Email: adm.pendencia@up380.com.br")
    print("     Senha: Finance.@2")
    print("  2. Configure segmentos e associe empresas (se aplic√°vel)")
    print("  3. Crie usu√°rios adicionais conforme necess√°rio")
    print("\nüí° Scripts de migra√ß√£o dispon√≠veis:")
    print("  ‚Ä¢ python migrate_adicionar_segmentos.py")
    print("  ‚Ä¢ python migrate_nota_fiscal_para_documento.py")
    print("  ‚Ä¢ python migrate_cliente_supervisor.py")

if __name__ == '__main__':
    main()


