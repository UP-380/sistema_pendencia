# ========================================
# COMANDOS PARA DEPLOY - SISTEMA SEM LIMITADORES
# ========================================

# ========================================
# 1. NO WINDOWS (Desenvolvimento)
# ========================================

cd "C:\Users\Luiz Marcelo\Desktop\PLANILHA DE PENDENCIAS"

# Ver alterações
git status
git diff app.py
git diff nginx.conf

# Adicionar e commitar
git add app.py nginx.conf DEPLOY_SEM_LIMITES.md COMANDOS_DEPLOY_SEM_LIMITES.txt
git commit -m "fix: Remove limitadores de requisições e upload + corrige login (SameSite=Lax)"

# Enviar para GitHub
git push origin main


# ========================================
# 2. NA VPS (Produção) - COPIE BLOCO POR BLOCO
# ========================================

# --- BLOCO 1: Navegação e backup ---
cd ~/sistema_pendencia
mkdir -p backups
cp instance/pendencias.db backups/pendencias_backup_$(date +%Y%m%d_%H%M%S).db
ls -lh backups/

# --- BLOCO 2: Puxar atualizações ---
git pull origin main
git log -3 --oneline

# --- BLOCO 3: Rebuild (SEM PERDER DADOS) ---
docker-compose down
docker-compose build --no-cache
docker-compose up -d

# --- BLOCO 4: Verificar logs ---
docker-compose ps
docker-compose logs web | tail -50
docker-compose logs nginx | tail -30

# --- BLOCO 5: Testar aplicação ---
curl http://localhost:5000
docker-compose logs web | grep -i "login"


# ========================================
# 3. VERIFICAÇÕES PÓS-DEPLOY
# ========================================

# Ver status dos containers
docker-compose ps

# Ver logs em tempo real
docker-compose logs -f

# Ver uso de recursos
docker stats --no-stream

# Verificar banco de dados
docker exec -it sistema_pendencia-web-1 python3 << 'EOF'
from app import db, Pendencia, Usuario, Empresa
print(f"Pendências: {Pendencia.query.count()}")
print(f"Usuários: {Usuario.query.count()}")
print(f"Empresas: {Empresa.query.count()}")
EOF


# ========================================
# 4. SE ALGO DER ERRADO - REVERTER
# ========================================

# Parar tudo
docker-compose down

# Restaurar backup (SUBSTITUA XXXXXXXX pelo nome do arquivo)
cp backups/pendencias_backup_XXXXXXXX_XXXXXX.db instance/pendencias.db

# Subir novamente
docker-compose up -d


# ========================================
# 5. REINICIAR SERVIÇOS INDIVIDUALMENTE
# ========================================

# Reiniciar apenas web
docker-compose restart web

# Reiniciar apenas nginx
docker-compose restart nginx

# Reiniciar tudo
docker-compose restart


# ========================================
# 6. LOGS DETALHADOS PARA DEBUG
# ========================================

# Salvar logs do web
docker-compose logs web > logs_web.txt

# Salvar logs do nginx
docker-compose logs nginx > logs_nginx.txt

# Salvar todos os logs
docker-compose logs > logs_completos.txt

# Ver últimas 100 linhas do web
docker-compose logs web --tail=100

# Ver logs em tempo real (Ctrl+C para sair)
docker-compose logs -f


# ========================================
# 7. COMANDOS ÚTEIS PARA MONITORAMENTO
# ========================================

# Ver IP e porta dos containers
docker-compose ps

# Ver processos dentro do container web
docker exec sistema_pendencia-web-1 ps aux

# Ver variáveis de ambiente
docker exec sistema_pendencia-web-1 env | grep -E "SECRET|SESSION|FLASK"

# Ver versão do Python
docker exec sistema_pendencia-web-1 python3 --version

# Ver pacotes instalados
docker exec sistema_pendencia-web-1 pip list

# Entrar no container (bash interativo)
docker exec -it sistema_pendencia-web-1 bash
# Dentro do container: exit para sair


# ========================================
# 8. LIMPAR CACHE E REBUILD COMPLETO
# ========================================

# Parar tudo
docker-compose down

# Remover imagens antigas
docker image prune -f

# Rebuild do zero
docker-compose build --no-cache --pull

# Subir
docker-compose up -d

# Ver logs
docker-compose logs -f


# ========================================
# 9. BACKUP COMPLETO DO SISTEMA
# ========================================

# Criar backup completo
cd ~
tar -czf sistema_pendencia_backup_$(date +%Y%m%d_%H%M%S).tar.gz \
  sistema_pendencia/instance/ \
  sistema_pendencia/static/ \
  sistema_pendencia/templates/ \
  sistema_pendencia/app.py \
  sistema_pendencia/requirements.txt \
  sistema_pendencia/docker-compose.yml \
  sistema_pendencia/nginx.conf

# Listar backups
ls -lh sistema_pendencia_backup_*.tar.gz


# ========================================
# 10. TESTAR CONECTIVIDADE E PERFORMANCE
# ========================================

# Testar resposta do Flask
time curl -I http://localhost:5000

# Testar resposta do Nginx
time curl -I http://localhost

# Fazer múltiplas requisições (teste de carga simples)
for i in {1..10}; do
  curl -s -o /dev/null -w "Request $i: %{http_code} - Time: %{time_total}s\n" http://localhost:5000
done


# ========================================
# FIM DOS COMANDOS
# ========================================

